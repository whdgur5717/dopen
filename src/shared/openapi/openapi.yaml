openapi: 3.0.0
info:
  title: Social Network API
  version: 1.0.0
  description: API for a social network service

servers:
  - url: https://kdt.frontend.5th.programmers.co.kr:5011

paths:
  /login:
    post:
      summary: User login
      operationId: 'login'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                  - token
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /signup:
    post:
      summary: User registration
      operationId: 'signup'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                fullName:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                required:
                  - user
                  - token
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string

  /logout:
    post:
      summary: User logout
      operationId: 'logout'
      responses:
        '200':
          description: Successful logout

  /auth-user:
    get:
      summary: Check authentication
      operationId: 'checkUserAuthentication'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/get-users:
    get:
      summary: Get user list
      operationId: 'getUserList'
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/online-users:
    get:
      summary: Get online users
      operationId: 'getOnlineUserList'
      responses:
        '200':
          description: List of online users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get user information
      operationId: 'getUserInfo'
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/upload-photo:
    post:
      summary: Upload profile or cover photo
      operationId: 'postUserProfileImg'
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                isCover:
                  type: boolean
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Updated user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /settings/update-user:
    put:
      summary: Update user information
      operationId: 'updateUserInfo'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                username:
                  type: string
      responses:
        '200':
          description: Updated user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /settings/update-password:
    put:
      summary: Update password
      operationId: 'updateUserPassword'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
      responses:
        '200':
          description: Password updated successfully

  /channels:
    get:
      summary: Get channel list
      operationId: 'getChannelList'
      responses:
        '200':
          description: List of channels
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Channel'

  /channels/create:
    post:
      summary: Create Channel
      operationId: 'createChannel'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                authRequired:
                  type: boolean
      responses:
        '200':
          description: Created channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

  /channel/{channelName}:
    get:
      summary: Get channel information
      operationId: 'getChannelInfo'
      parameters:
        - in: path
          name: channelName
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'

  /posts/channel/{channelId}:
    get:
      summary: Get posts for a specific channel
      operationId: 'getPostListByChannel'
      parameters:
        - in: path
          name: channelId
          required: true
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /posts/author/{authorId}:
    get:
      summary: Get posts for a specific author
      operationId: 'getPostListByUser'
      parameters:
        - in: path
          name: authorId
          required: true
          schema:
            type: string
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /posts/create:
    post:
      summary: Create a post
      operationId: 'createPost'
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - title
                - channelId
                - image
              properties:
                title:
                  type: string
                image:
                  type: string
                  format: binary
                  nullable: true
                channelId:
                  type: string
      responses:
        '200':
          description: Created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/{postId}:
    get:
      summary: Get post details
      operationId: getPostByPostId
      parameters:
        - in: path
          name: postId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/update:
    put:
      summary: Update a post
      operationId: 'updatePost'
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                postId:
                  type: string
                title:
                  type: string
                image:
                  type: string
                  format: binary
                imageToDeletePublicId:
                  type: string
                channelId:
                  type: string
      responses:
        '200':
          description: Updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/delete:
    delete:
      summary: Delete a post
      operationId: 'deletePost'
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post deleted successfully

  /likes/create:
    post:
      summary: Like a post
      operationId: 'likePost'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        '200':
          description: Like created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'

  /likes/delete:
    delete:
      summary: Unlike a post
      operationId: 'deleteLikePost'
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Like deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'

  /comments/create:
    post:
      summary: Create a comment
      operationId: 'createComment'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
                - postId
              properties:
                comment:
                  type: string
                postId:
                  type: string
      responses:
        '200':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /comments/delete:
    delete:
      summary: Delete a comment
      operationId: 'deleteComment'
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /notifications:
    get:
      summary: Get user notifications
      operationId: 'getNotification'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

  /notifications/seen:
    put:
      summary: Mark notifications as seen
      operationId: 'putNotificationSeen'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notifications marked as seen

  /notifications/create:
    post:
      summary: Create a notification
      operationId: 'createNotification'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationType:
                  type: string
                  enum: [COMMENT, FOLLOW, LIKE, MESSAGE]
                notificationTypeId:
                  type: string
                userId:
                  type: string
                postId:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'

  /follow/create:
    post:
      summary: Follow a user
      operationId: 'followUser'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: Follow created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'

  /follow/delete:
    delete:
      summary: Unfollow a user
      operationId: 'unfollowUser'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: Follow deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'

  /messages/conversations:
    get:
      summary: Get user's message inbox
      operationId: getMessageList
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'

  /messages:
    get:
      summary: Get messages with a specific user
      operationId: 'getMessageListByUser'
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'

  /messages/create:
    post:
      summary: Send a message
      operationId: 'sendMessage'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - receiver
              properties:
                message:
                  type: string
                receiver:
                  type: string
      responses:
        '200':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /messages/update-seen:
    put:
      summary: Mark messages as seen
      operationId: 'putMessageSeen'
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sender:
                  type: string
      responses:
        '200':
          description: Messages marked as seen

  /search/users/{query}:
    get:
      summary: Search users
      operationId: 'searchUser'
      parameters:
        - in: path
          name: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of users matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /search/all/{query}:
    get:
      summary: Search posts and users
      operationId: 'searchPostAndUser'
      parameters:
        - in: path
          name: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of posts and users matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/User'
                    - $ref: '#/components/schemas/Post'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      required:
        - role
        - isOnline
        - posts
        - likes
        - comments
        - followers
        - following
        - notifications
        - messages
        - _id
        - fullName
        - email
        - createdAt
        - updatedAt
        - username
      properties:
        coverImage:
          type: string
        image:
          type: string
        username:
          type: string
        role:
          type: string
        emailVerified:
          type: boolean
        banned:
          type: boolean
        isOnline:
          type: boolean
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
        comments:
          type: array
          items:
            type: string
        followers:
          type: array
          items: {}
        following:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              user:
                type: string
              follower:
                type: string
              createdAt:
                type: string
              updatedAt:
                type: string
              __v:
                type: integer
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        _id:
          type: string
        fullName:
          type: string
        email:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Channel:
      type: object
      required:
        - posts
        - _id
        - name
        - description
        - createdAt
        - updatedAt
      properties:
        authRequired:
          type: boolean
        posts:
          type: array
          items:
            type: string
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Post:
      type: object
      required:
        - likes
        - comments
        - _id
        - title
        - channel
        - author
        - createdAt
        - updatedAt
      properties:
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        _id:
          type: string
        image:
          type: string
          nullable: true
        imagePublicId:
          type: string
          nullable: true
        title:
          type: string
        channel:
          $ref: '#/components/schemas/Channel'
        author:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
        updatedAt:
          type: string

    Like:
      type: object
      required:
        - _id
        - user
        - post
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
        user:
          type: string
        post:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Comment:
      type: object
      required:
        - _id
        - comment
        - author
        - post
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
        comment:
          type: string
        author:
          $ref: '#/components/schemas/User'
        post:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Notification:
      type: object
      required:
        - seen
        - _id
        - author
        - createdAt
        - updatedAt
      properties:
        seen:
          type: boolean
        _id:
          type: string
        author:
          $ref: '#/components/schemas/User'
        user:
          oneOf:
            - $ref: '#/components/schemas/User'
            - type: string
        post:
          type: string
          nullable: true
        follow:
          type: string
        comment:
          $ref: '#/components/schemas/Comment'
        message:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Follow:
      type: object
      required:
        - _id
        - user
        - follower
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
        user:
          type: string
        follower:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string

    Conversation:
      type: object
      required:
        - _id
        - message
        - sender
        - receiver
        - seen
        - createdAt
      properties:
        _id:
          type: array
          items:
            type: string
        message:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        receiver:
          $ref: '#/components/schemas/User'
        seen:
          type: boolean
        createdAt:
          type: string

    Message:
      type: object
      required:
        - _id
        - message
        - sender
        - receiver
        - seen
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
        message:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        receiver:
          $ref: '#/components/schemas/User'
        seen:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
